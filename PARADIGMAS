
¿QUE SON LOS PARADIGMAS DE PROGRAMACIÓN?
El término paradigma tuvo sus orígenes en Grecia su significado es: modelo, ejemplo o patrón.
Un paradigma de programación es un estilo de desarrollo de programas, es decir, un modelo
para resolver problemas computacionales, los paradigmas fundamentales están asociados a 
determinados modelos de computo.
Los paradigmas de programación son: 
•	Programación imperativa 
•	Programación funcional 
•	Programación lógica
•	Programación orientada a objetos 

PROGRAMACIÓN IMPERACTIVA 
En este, programa es una secuencia finita de instrucciones que se ejecutan una tras otra. 
Los datos utilizados se almacenan en memoria principal y se referencian utilizando variables.
Lenguajes que utilizan este paradigma: 
Pascal, Ada, Cobol, C, Modula-2 y Fortran.   

PROGRAMACIÓN FUNCIONAL
El paradigma funcional está basado en el modelo matemático de composición funcional. En este 
modelo, el resultado de un cálculo es la entrada del siguiente y así sucesivamente hasta que
una composición produce el valor deseado.
La programación funcional incorpora el concepto de función como objeto de primera clase, lo
que significa que las funciones se pueden tratar como datos, estos datos pueden pasar como 
parámetros, calculadas y devueltas como valores normales.
Ejemplo de lenguaje: LISP  

PROGRAMACIÓN LÓGICA
Paradigma de programación basado en la lógica de primer orden estudia el uso de la lógica 
para el planteamiento de problemas y el control sobre las reglas de inferencia para alcanzar
la soulución automática.
La programación logica, junto con la funcional, forma parte de lo que se conoce como Programación
Declarativa, es decir la programación Lógica, se trabaja en una forma descriptiva, estableciendo
relaciones entre entidades, indicando no como, sino que hacer, entonces se dice que la idea esencial
de la programación logica es: 

PROGRAMAR = LÓGICA + CONTROL

Lógica(Programador):Hechos y reglas para representar conocimiento.
Control(Interprete):Deduccion lógica para dar respuestas(soluciones).
-La prógramacion lógica construye base de conocimientos mediante reglasy echos.

Ejemplo:
% Hechos:
es_español("Manolo").
es_italiano("Marco").
es_colombiano("Marcelo").
 
% Reglas:
es_europeo(A) :- es_español(A).
es_europeo(A) :- es_italiano(A).
es_americano(A) :- es_colombiano(A).
es_terricola(A) :- es_europeo(A).
es_terricola(A) :- es_americano(A).
son_del_mismo_continente(A,B) :- es_europeo(A), es_europeo(B).
son_del_mismo_continente(A,B) :- es_americano(A), es_americano

- son_del_mismo_continente("Manolo", "Marco").
yes

PROGRAMACION ORIENTADA A OBJETOS 
Es un paradigma de la programacion de computadores que tiene como objetivo el desarrollo computacional
basado en una coleccion de objetos que estan interrelacionados y trabajan conjuntamente para resolver 
un problema.
Surge dentro de los paradigmas de la programacion como un enfoque diferente al momento de obtener soluciones computacionales.
Evolucionando a traves de los años cuya primera implementacion fueron dos lenguajes de programacion de simulacion los cuales son:
Simula 1 y Simula 7 considerados como el primer lenguaje orientado a objetos donde siempre son manejados por medio de referencias 
el cual entiende dos tipos de objetos:
-los activos 
-los inactivos
tanto de unos como de otro es posible ejecutar los procedimientos miembro y consultar los atributos en cualquier momento.

VENTAJAS
-Una buena abstraccion de las clases, objetos y atributos nos brinda una implementacion mas detallada,puntual y coherente.
-Reutilizacion de codigo lo cual permite :
   -rapido desarrollo 
   -alta calidad del codigo
   -bajo costo en fases de desarrollo
-Modificalidad
-Encapsulamiento
-Fiablidad
-Bajo acoplamimento y alta cohesion
-Beneficios de diseño
-Mantenimiento de software
-Amplia documentacion

DESVENTAJAS
-Curva de aprendizaje
-La ejecucion de programas orientados a objetos es mas lenta 
-Tiempo en fase de diseño
-Tamaño del programa

LENGUAJES DE PROGRAMACION
Un lenguaje de programacion es orientado a objetos si cumple con las siguientes condiciones:
Soporta objetos que son abstracciones de datos con una interfaz de operaciones con nombre y un estado local oculto.
Los objetos tienen un tipo asociado (la clase)
Los tipos (clases) pueden heredar atributos de los supertipos (superclases):
ALGUNOS EJEMPLOS:
-ACTIONSCRIPT    -C++    -C#    -JAVA    -OBJECTIVE-C    -PERL    -PHP
-PYTHON          -RUBY   -SMALLTALK      -SCALA

BIBLIOGRAFIA:
https://ferestrepoca.github.io/paradigmas-de-programacion/poo/poo_teoria/index.html
https://s3.amazonaws.com/academia.edu.documents/38609102/introduccion_a_la_programcion_teoria_y_practica.pdf


